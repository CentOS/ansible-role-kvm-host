# Defaults variables for role kvm-host

# Do we also want to manage storage pool for libvirt images ?
# That will create automatically a LV in the first VG and mount it
# Set it to False if you manage manually or you convert from existing node with storage from other VG/raid/volume
# Default to True
kvm_host_manage_storage: True

# Creating a dedicated VG
# Set to True and then a name and devices to use
# Don't forget to also then declare kvm_host_vg !
kvm_host_dedicated_vg: False
kvm_host_vg_name: vg_virt
# Which physical devices to use
# kvm_host_vg_disks:
#   - /dev/sda
#   - /dev/sdb
kvm_host_vg_disks: []

# If not creating a dedicated VG, defaulting to first VG found
kvm_host_vg: "{{ ansible_lvm.vgs.keys() | list | first }}"

# Default size for libvirt_images LV storage
kvm_host_lv_size: 100G

# Networking - bridges with vlan support
# That will just create bridge without any ip settings attached to it , so dedicated for VMs
# By default no bridge interface will be created.
# Creating bridge over vlan is working and just need vlan_id specified
# example:
# kvm_host_net_bridges:
#   - name: br0
#     device: eth0
#   - name: br-999
#     device: eth0
#     vlan_id: 999
#     
kvm_host_net_bridges: []

# We can also define some virtual networks (non bridge) like this:
# kvm_host_networks:
#   - name: test
#     interface: virbr1 # usually there is already a virbr0 for 'default' so just increment in this list
#     ip: 172.18.254.1
#     netmask: 255.255.255.0
#     dhcp_range_start: 172.18.254.2
#     dhcp_range_end: 172.18.254.30
#
# Worth knowing that iptables/nftables rules aren't applied so be sure to have a look at iptables roles to then let some ports/network/traffic being forwarded and eventually natt'ed for ipv4 !
# We just define the networks from a libvirt PoV here

kvm_host_networks: []
